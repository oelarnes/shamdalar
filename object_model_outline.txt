This document describes the high-level view of how game objects are implemented in this engine. According to the Magic comprehensive rules:

109.1. An object is an ability on the stack, a card, a copy of a card, a token, a spell, a permanent, or an emblem.

in our model the objects above use the following classes, respectively: abil, card_obj, card_obj, perm, spell, perm, emblem. Note that other
uses of ability in the rules have different classes (e.g. abil_to_stack, stabil, etc.)

In (almost) all zones an object can gain and lose abilities and characteristics due to one-shot and continuous effects. Those effects
are constantly re-evaluated from scratch based on the underlying characteristics of the object. Furthermore, the underlying (these might
coincide with the "copiable values") values can be affected by one-shot effects as part of initializiation. For all objects, there is
a static ("physical") object that the object points to, and that pointer can be passed on as new objects are initialized.

Object (abil, card_obj, etc)
|
-->Status(tapped, untapped, etc)
|
-->Characteristics (color, power/toughness, abilities. updated before each new effect or priority based on copiable values)
|
-->Copiable Values (initialized at creation. Immutable)
|
-->Physical Object ("token" for abil, copies, tokens, emblems, "card" for card_obj, permanents, non-copy spells.)

The copiable values are not continuously derived from the physical card. Tokens reinitialize as card_obj objects after
a change of zones, where they trigger effects, but then are deleted by the engine.
